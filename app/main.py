from fastapi import FastAPI, HTTPException

from .utils import Calculator
from .model import Receipt, Item

# gets multiplier for _get_alpha method in utils.py
# value passes to Calculator contructor
user_multiplier = input('Input user mulitiplier:')

app = FastAPI()
calculator = Calculator(user_multiplier)

# Database kept in-memory. Stores a receipt id and its receipt
receipts_by_user = {} # key: user_id, value: {receipt}
receipts = {} # key: id, value: receipt

@app.get('/receipts/{id}/points')
async def get_receipts(id: str) -> None:
    """
    Takes in a JSON receipt (see example in the example directory) and returns a 
    JSON object with an ID generated by your code.

    The ID returned is the ID that should be passed into /receipts/{id}/points to 
    get the number of points the receipt was awarded.

    How many points should be earned are defined by the rules below.

    Reminder: Data does not need to survive an application restart. This is to allow 
    you to use in-memory solutions to track any data generated by this endpoint.

    { "id": "7fb1377b-b223-49d9-a31a-5a02701dd310" }
    """
    # raises 404 error when a receipt id cannot be found
    if id not in receipts:
        raise HTTPException(status_code=404, detail=f'No receipt for id, {id}.')

    return {'points': receipts[id]}


@app.post('/receipts/process')
async def process_points(receipt: Receipt, user_id: str) -> None:
    """
    A simple Getter endpoint that looks up the receipt by the ID and returns an object 
    specifying the points awarded.

    NOTE: automatically raises a 422 error if any Receipt field is missing or wrong type

    { "points": 32 }
    """   
    # error handeling in case no items in reciept
    if len(receipt.items) == 0:
        raise HTTPException(status_code=400, detail=f'Items list empty. Please ensure items are populated.')

    # create ID for receipt
    receipt_id = calculator.create_id()
    
    # calculate points and add to dictionary
    points, message = calculator.calculate(receipt)
    receipts[receipt_id] = points

    # prints point calculation breakdown to terminal
    print(message)

    receipts_by_user[user_id][receipt_id] = receipt

    return {'id': receipt_id}
