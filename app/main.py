# https://medium.com/@ChanakaDev/mongodb-with-fastapi-1d5440880520
# https://devhubcommunity.hashnode.dev/fastapi-and-mongodb-the-best-of-both-worlds

from fastapi import FastAPI, HTTPException
from bson.objectid import ObjectId

from .utils.conn import lifespan
from .utils.env import MONGO_DB_USERNAME, MONGO_DB_PASSWORD
from .utils.utils import Calculator, IDGenerator
from .utils.model import Receipt, Status, User
from .utils.exception import InternalStatusError

# gets multiplier for _get_alpha method in utils.py
# value passes to Calculator contructor
# user_multiplier = input('Input user mulitiplier:')

app = FastAPI(lifespan=lifespan)
calculator = Calculator()


# CREATE
@app.post('/user/create-user')
async def create_user(user: User) -> dict:
    response = app.db["users"].insert_one(user.model_dump())
    return {"user_id": str(response.inserted_id), "message": "User successfully created."}


@app.post('/user/{user_id}/receipts/process')
async def process_points(user_id: str, receipt: Receipt) -> None:
    """
    A simple Getter endpoint that looks up the receipt by the ID and returns an object 
    specifying the points awarded.

    NOTE: automatically raises a 422 error if any Receipt field is missing or wrong type

    { "points": 32 }
    """   

    # error handeling in case no items in reciept
    if len(receipt.items) == 0:
        message = f'Items list empty. Please ensure items are populated.'
        raise [HTTPException(status_code=400, detail=message), InternalStatusError(code=Status.INSUFFICIENT_INFORMATION, message=message)]

    # calculate points from receipt
    points, message = calculator.calculate(receipt)

    # assign missing values from receipt
    receipt.user_id = user_id
    receipt.points = points
    receipt.points_breakdown = message
    
    # prints point calculation breakdown to terminal
    print(message)

    # add receipt to database
    response = app.db["users"].insert_one(receipt.model_dump())
    return {'id': str(response.inserted_id), "message": "Receipt successfully processed."}


# READ
# @app.get('/user/{user_id}')
# async def get_user(user_id: str) -> dict:
    
#     _id = ObjectId(user_id)
#     user = app.db['users'].find_one({'_id': _id})
    
#     if not user:
#         message = "User not found."
#         raise HTTPException(status_code=404, detail=message)

    # return {"user_id": user_id, "user_information": user}

# @app.get('/receipts/{id}/points')
# async def get_receipts(id: str) -> None:
#     """
#     Takes in a JSON receipt (see example in the example directory) and returns a 
#     JSON object with an ID generated by your code.

#     The ID returned is the ID that should be passed into /receipts/{id}/points to 
#     get the number of points the receipt was awarded.

#     How many points should be earned are defined by the rules below.

#     Reminder: Data does not need to survive an application restart. This is to allow 
#     you to use in-memory solutions to track any data generated by this endpoint.

#     { "id": "7fb1377b-b223-49d9-a31a-5a02701dd310" }
#     """
#     # raises 404 error when a receipt id cannot be found
#     if id not in receipts:
#         raise HTTPException(status_code=404, detail=f'No receipt for id, {id}.')

#     return {'points': receipts[id]}

# UPDATE

# DELETE