from fastapi import FastAPI, HTTPException

from .utils import Utils, Logger
from .model import Receipt, Item

app = FastAPI()
util = Utils()

# Database kept in-memory. Stores a receipt id and its receipt
receipts = {}

@app.get('/receipts/{id}/points')
async def process_receipts(id: str) -> None:
    """
    Takes in a JSON receipt (see example in the example directory) and returns a 
    JSON object with an ID generated by your code.

    The ID returned is the ID that should be passed into /receipts/{id}/points to 
    get the number of points the receipt was awarded.

    How many points should be earned are defined by the rules below.

    Reminder: Data does not need to survive an application restart. This is to allow 
    you to use in-memory solutions to track any data generated by this endpoint.

    { "id": "7fb1377b-b223-49d9-a31a-5a02701dd310" }
    """
    # raises 404 error when a receipt id cannot be found
    if id not in receipts:
        raise HTTPException(status_code=404, detail=f'No receipt for id, {id}.')

    return {'points': receipts[id]}


@app.post('/receipts/process')
async def get_points(receipt: Receipt) -> None:
    """
    A simple Getter endpoint that looks up the receipt by the ID and returns an object 
    specifying the points awarded.

    { "points": 32 }
    """    
    # create ID for receipt
    receipt_id = util.create_id()
    
    # calculate points and add to dictionary
    points = util.calculate(receipt)
    receipts[receipt_id] = points

    return {'id': receipt_id}
